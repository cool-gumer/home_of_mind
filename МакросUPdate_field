#include "airline_ticket.h"
#include "test_runner.h"
#include <iostream>
#include <algorithm>
#include <numeric>
#include "istream"
#include <sstream>
using namespace std;
// Реализуйте этот макрос, а также необходимые операторы для классов Date и Time
#define UPDATE_FIELD(ticket, field, values) {	\
		map<string, string>::const_iterator it;		  \
	    it = values.find(#field);\
	if (it != values.end()) {					          \
		stringstream is;						              \
		is.str(it->second);						            \
		is >> ticket.field;						            \
	}											                      \
}
void RemoveCharacterFromString(char character_for_remove, string &string) {
    auto it = std::remove_if(std::begin(string), std::end(string),
                             [=](char c) { return c == character_for_remove; });
    string.erase(it, std::end(string));
}


void operator>>(string s,Date & d1){
           stringstream ss ;
           RemoveCharacterFromString('-',s);
           ss<<s;
           ss>>d1.year>>d1.month>>d1.day;
}
void operator>>(string s,Time &  t1) {
    stringstream ss ;
    RemoveCharacterFromString(':',s);
    ss<<s;
    ss>>t1.hours>>t1.minutes;
}


bool operator == (const Date &d1,const Date & d2 ) {
    if(d1.year==d2.year && d1.month==d2.month && d1.day==d2.day){
        return true;
    }
    return false;
}
bool operator == (const Time & t1,const Time &t2 ) {
    if(t1.hours==t2.hours && t1.minutes==t2.minutes){
        return true;
    }
    return false;
}
ostream& operator << (ostream& os, const Date& d) {
    os << d.day << "." << d.month << "." << d.year;
    return os;
}
ostream& operator << (ostream& os, const Time& t) {
    os << t.hours << ":" << t.minutes;
    return os;
}

stringstream& operator >>(stringstream& is,  Time & t){
    char symb;
    is >> t.hours >>symb >> t.minutes;
    return is;
}
stringstream& operator>>(stringstream& is,  Date &d) {
    char symb;
is >> d.year >> symb  >> d.month>>symb >> d.day;
    return is;
}

void TestUpdate() {
    AirlineTicket t;
    t.price = 0;

    const map<string, string> updates1 = {
            {"departure_date", "2018-2-28"},
            {"departure_time", "17:40"},
    };
    UPDATE_FIELD(t, departure_date, updates1);
    UPDATE_FIELD(t, departure_time, updates1);
    UPDATE_FIELD(t, price, updates1);

    ASSERT_EQUAL(t.departure_date, (Date{2018, 2, 28}));
    ASSERT_EQUAL(t.departure_time, (Time{17, 40}));
    ASSERT_EQUAL(t.price, 0);

    const map<string, string> updates2 = {
            {"price", "12550"},
            {"arrival_time", "20:33"},
    };
    UPDATE_FIELD(t, departure_date, updates2);
    UPDATE_FIELD(t, departure_time, updates2);
    UPDATE_FIELD(t, arrival_time, updates2);
    UPDATE_FIELD(t, price, updates2);

    // updates2 не содержит ключей "departure_date" и "departure_time", поэтому
    // значения этих полей не должны измениться
    ASSERT_EQUAL(t.departure_date, (Date{2018, 2, 28}));
    ASSERT_EQUAL(t.departure_time, (Time{17, 40}));
    ASSERT_EQUAL(t.price, 12550);
    ASSERT_EQUAL(t.arrival_time, (Time{20, 33}));
}





int main() {
    TestRunner tr;
    RUN_TEST(tr, TestUpdate);
}
