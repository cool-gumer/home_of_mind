#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>

int get_pos(const std::vector<int> &numbers, int number) {
    // TODO optimize this function
    bool flag = false;
    int l = 0; // левая граница
    int r = numbers.size()-1; // правая граница
    int mid;

    while ((l <= r) && (flag != true)) {
        mid = (l + r) / 2; // считываем срединный индекс отрезка [l,r]

        if (numbers[mid] == number) flag = true; //проверяем ключ со серединным элементом
        if (numbers[mid] > number) r = mid - 1; // проверяем, какую часть нужно отбросить
        else l = mid + 1;
    }

    if (flag) return mid+1;
        return -1;

}

int main(void) {
    size_t number_count;
    std::cin >> number_count;
    std::vector<int> numbers(number_count);
    for (auto &number:numbers) {
        std::cin >> number;
    }
    assert(std::is_sorted(numbers.begin(), numbers.end()));

    size_t query_count;
    std::cin >> query_count;
    while (query_count-- > 0) {
        int number;
        std::cin >> number;
        std::cout << get_pos(numbers, number) << " ";
    }
    std::cout << std::endl;
}
